<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 202 Blue Note</title>
    <link>https://key4920.github.io/tags/Algorithms/</link>
    <description>Recent content in Algorithms on 202 Blue Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://key4920.github.io/tags/Algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>알고리즘 공부 방향성</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/summary/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/summary/</guid>
      <description>알고리즘 공부 방향성 #  💡 Summary #  [ 목적 ]
 코딩테스트 더 효율적인 코드 구현 능력 향상 : “왜?”에 집중하여 학습하자 Snippet 만들기 : 깃허브 기스트  [ 기본서 ] 파이썬 알고리즘 인터뷰
[ 언어 ] 파이썬
[ 문제풀이 플랫폼 ] LeetCode
 방향성 #   나의 1차적 목적은 코딩테스트이다.
하지만 더 멀게는 효율적인 코드 구현 능력 향상을 목적으로하며 “왜?”에 집중하여 학습하고자 한다. 전체적으로 파이썬 알고리즘 인터뷰 책을 따라 학습하며</description>
    </item>
    
    <item>
      <title>[ LeetCode #5 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/5/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/5/</guid>
      <description>[ LeetCode #5 ] Longest Palindrome Substring 가장 긴 팰린드롬 부분 문자열 #  [ LeetCode #5 ] Longest Palindromic Substring 바로가기  #  💡 유용한 지식 #  max() 함수 key 활용
max( result, two_pointer(i, i+1), two_pointer(i, i+2), key = len) 투포인터 좁히는 방향이 아닌 확장하며 탐색
def two_pointer(left, right): while left &amp;gt;= 0 and right &amp;lt; len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right]    문제 #  Given a string s, return the longest palindromic substring in s.</description>
    </item>
    
    <item>
      <title>[ LeetCode #49 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/49/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/49/</guid>
      <description>[ LeetCode #49 ] Group Anagrams 그룹 애너그램 #  [ LeetCode #49 ] Group Anagrams 바로가기  #  💡 유용한 지식 #  Dictionary defaultdict 객체
 존재하지 않는 키를 조회할 경우 에러 메시지 대신 디폴트 값을 기준으로 키에 대한 딕셔너리 아이템을 생성해줌  # defaultdict() 사용으로 불필요한 if 연산 제거 from collections import defaultdict groups = defaultdict(list)    문제 #  Given an array of strings strs, group the anagrams together.</description>
    </item>
    
    <item>
      <title>[ LeetCode #819 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/819/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/819/</guid>
      <description>[ LeetCode #819 ] Most Common Word 가장 흔한 단어 #  [ LeetCode #819 ] Most Common Word 바로가기  #  💡 유용한 지식 #  Dictionary TIPS!
# 빈도 세기 from collections import Counter count_dict = Counter(re.sub(&amp;#39;[^a-z0-9]&amp;#39;,&amp;#39; &amp;#39;,paragraph.lower()).split()) # key 삭제 for word in banned: del count_dict[word] # 가장 높은 빈도 추출 : most_common() # - (0)이 아닌 (1) 이 가장 높은 빈도 # - return = (key,value) count_dict.</description>
    </item>
    
    <item>
      <title>[ LeetCode #937 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/937/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/937/</guid>
      <description>[ LeetCode #937 ] Reorder Log Files 로그 파일 재정렬 #  [ LeetCode #937 ] Reorder Log Files 바로가기  #  💡 유용한 지식 #  리스트 정렬
# 리스트 정렬 index 반환 index = sorted(range(len(s)), key = lambda x : s[x]) s = [s[i] for i in index] # string split list로 sort s.sort(key = lambda x: (x.split(&amp;#39; &amp;#39;)[1:], x.split(&amp;#39; &amp;#39;)[0])) # 함수를 이용한 sorting def fn(s): return s[0], s[-1] sorted(a, key=fn) sorted(a, key=len)   문제 #  You are given an array of logs.</description>
    </item>
    
    <item>
      <title>[ LeetCode #344 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/344/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/344/</guid>
      <description>[ LeetCode #344 ] Reverse String 문자열 뒤집기 #  [ LeetCode #344 ] Reverse String 바로가기  #  💡 유용한 지식 #  리스트 역순으로 정렬
# reverse() 함수 활용 s.reverse() # 슬라이싱 방법 활용 s = s[::-1] s[:] = s[::-1] # 투포인터를 활용하는 방법도 있다. def reverseString(s): left, right = 0, len(s)-1 while left &amp;lt; right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 return s   문제 #  Write a function that reverses a string.</description>
    </item>
    
    <item>
      <title>[ LeetCode #125 ]</title>
      <link>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/125/</link>
      <pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://key4920.github.io/docs/ETC/Algorithms/LeetCode/125/</guid>
      <description>[ LeetCode #125 ] Valid Palindrom 유효한 팰린드롬 #  [ LeetCode #125 ] Valid Palindrome 바로가기  #  💡 유용한 지식 #  ‘팰린드롬’ 이란?
 앞뒤가 똑같은 단어나 문장으로, 뒤집어도 같은말이 되는 단어 또는 문장  리스트 pop(0) 과 데크 popleft()
 리스트 pop(0) 이 O(n) 인데 반해 deque popleft() 가 O(1) 이기 때문에 n번씩 반복하면 리스트는 O(n2), deque 구현은 O(n)으로 성능 차이가 크다.  문자열 슬라이싱</description>
    </item>
    
  </channel>
</rss>
